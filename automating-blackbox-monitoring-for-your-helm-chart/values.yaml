---
# -- Provide a name in place of `automating-blackbox-monitoring-for-your-helm-chart`
nameOverride: ""

# -- String to fully override `"automating-blackbox-monitoring-for-your-helm-chart.fullname"`
fullnameOverride: ""

service:
  # -- Kubernetes service type
  type: ClusterIP
  # -- Kubernetes port where service is exposed
  port: 8181

ingress:
  # -- Enable ingress record generation
  enabled: false
  # -- IngressClass that will be be used to implement the Ingress
  className: ""
  # -- Additional annotations for the Ingress resource
  annotations: {}
    # cert-manager.io/cluster-issuer: cluster-issuer-name
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Hostname under which the application shall be reached
  hostname: chart-example.local
  # -- An array with the tls configuration
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

blackbox:
  # -- Enable the creation of a Probe
  enabled: true
  blackboxProber:
    # -- use an existing Blackbox Exporter as prober. The section `blackbox.probeSpec.prober` will be ignored if set to true.
    enabled: true
    # -- Namespace where the Blackbox Exporter service is running.
    namespace: ""
    networkPolicy:
      enabled: true
    # -- Path to collect metrics from.
    path: "/probe"
    # -- Port that the Blackbox Exporter service is exposing.
    port: 9115
    # -- Name of the Blackbox Exporter service.
    service: prometheus-blackbox-exporter
  helmTargets:
    # -- use ingress and service resource of this Helm Chart as static target
    enabled: true
    # -- create a target for the ingress resource
    ingress: true
    # -- path that will be scraped on the ingress and service resource. Needs to start with "/"
    path: ""
    # -- create a target for the service resource
    service: true
  probeSpec:
    # -- Authorization section for this endpoint
    authorization: {}
    # -- BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
    basicAuth: {}
    # -- Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.
    bearerTokenSecret: {}
    # -- Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.
    interval: "30s"
    # -- The job name assigned to scraped metrics by default.
    jobName: ""
    # -- Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
    labelLimit: ""
    # -- Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
    labelNameLengthLimit: ""
    # -- Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
    labelValueLengthLimit: ""
    # -- MetricRelabelConfigs to apply to samples before ingestion.
    metricRelabelings: []
    # -- The module to use for probing specifying how to probe the target.
    module: "http_2xx"
    # -- OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
    oauth2: {}
    # -- Specification for the prober to use for probing targets. By default the prober will be created by the `blackboxProber` attributes.
    prober: {}
    # -- SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
    sampleLimit: ""
    # -- Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape timeout is used.
    scrapeTimeout: ""
    # -- TargetLimit defines a limit on the number of scraped targets that will be accepted.
    targetLimit: ""
    # -- defines a set of static or dynamically discovered targets to probe
    targets: {}
    # -- TLS configuration to use when scraping the endpoint.
    # @default -- see [values.yaml](./values.yaml) for example
    tlsConfig:
      insecureSkipVerify: true
